<launch>
  <!-- These are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="use_robot_name" default="social_robot"
       doc="Must match the robotNamespace tag in the gazebo description file"/>
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find social_robot_gazebo)/worlds/empty.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
   command="$(find xacro)/xacro.py '$(find social_robot_description)/urdf/social_robot.urdf.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
  args="-urdf -model social_robot -param robot_description -z 0.075"/>
  <node name="tf_footprint_base" pkg="tf" type="static_transform_publisher"
  args="0 0 0 0 0 0 base_link base_footprint 30" />
  <node name="fake_joint_calibration" pkg="rostopic" type="rostopic"
  args="pub /calibrated std_msgs/Bool true" />

  <!-- ros_control robotis manipulator launch file -->
  <!-- <group ns="$(arg use_robot_name)"> -->
    <include file="$(find social_robot_gazebo)/launch/position_controller.launch">
      <arg name="use_robot_name" value="$(arg use_robot_name)"/>
    </include>
</launch>
